// @cropper/element-viewer@2.0.1 downloaded from https://ga.jspm.io/npm:@cropper/element-viewer@2.0.1/dist/element-viewer.esm.raw.js

import e from"@cropper/element";import{CROPPER_SELECTION as t,isElement as s,on as i,EVENT_CHANGE as o,CROPPER_CANVAS as n,CROPPER_IMAGE as a,EVENT_LOAD as r,EVENT_TRANSFORM as h,off as c,CROPPER_VIEWER as l}from"@cropper/utils";var $=":host{display:block;height:100%;overflow:hidden;position:relative;width:100%}";const g=new WeakMap;const d=new WeakMap;const m=new WeakMap;const u=new WeakMap;const f="both";const S="horizontal";const p="vertical";const I="none";class CropperViewer extends e{constructor(){super(...arguments);this.$onSelectionChange=null;this.$onSourceImageLoad=null;this.$onSourceImageTransform=null;this.$scale=1;this.$style=$;this.resize=p;this.selection="";this.slottable=false}set $image(e){d.set(this,e)}get $image(){return d.get(this)}set $sourceImage(e){u.set(this,e)}get $sourceImage(){return u.get(this)}set $canvas(e){g.set(this,e)}get $canvas(){return g.get(this)}set $selection(e){m.set(this,e)}get $selection(){return m.get(this)}static get observedAttributes(){return super.observedAttributes.concat(["resize","selection"])}connectedCallback(){super.connectedCallback();let e=null;e=this.selection?this.ownerDocument.querySelector(this.selection):this.closest(this.$getTagNameOf(t));if(s(e)){this.$selection=e;this.$onSelectionChange=this.$handleSelectionChange.bind(this);i(e,o,this.$onSelectionChange);const t=e.closest(this.$getTagNameOf(n));if(t){this.$canvas=t;const e=t.querySelector(this.$getTagNameOf(a));if(e){this.$sourceImage=e;this.$image=e.cloneNode(true);this.$getShadowRoot().appendChild(this.$image);this.$onSourceImageLoad=this.$handleSourceImageLoad.bind(this);this.$onSourceImageTransform=this.$handleSourceImageTransform.bind(this);i(e.$image,r,this.$onSourceImageLoad);i(e,h,this.$onSourceImageTransform)}}this.$render()}}disconnectedCallback(){const{$selection:e,$sourceImage:t}=this;if(e&&this.$onSelectionChange){c(e,o,this.$onSelectionChange);this.$onSelectionChange=null}if(t&&this.$onSourceImageLoad){c(t.$image,r,this.$onSourceImageLoad);this.$onSourceImageLoad=null}if(t&&this.$onSourceImageTransform){c(t,h,this.$onSourceImageTransform);this.$onSourceImageTransform=null}super.disconnectedCallback()}$handleSelectionChange(e){this.$render(e.detail)}$handleSourceImageLoad(){const{$image:e,$sourceImage:t}=this;const s=e.getAttribute("src");const i=t.getAttribute("src");if(i&&i!==s){e.setAttribute("src",i);e.$ready((()=>{setTimeout((()=>{this.$render()}),50)}))}}$handleSourceImageTransform(e){this.$render(void 0,e.detail.matrix)}$render(e,t){const{$canvas:s,$selection:i}=this;e||i.hidden||(e=i);(!e||e.x===0&&e.y===0&&e.width===0&&e.height===0)&&(e={x:0,y:0,width:s.offsetWidth,height:s.offsetHeight});const{x:o,y:n,width:a,height:r}=e;const h={};const{clientWidth:c,clientHeight:l}=this;let $=c;let g=l;let d=NaN;switch(this.resize){case f:d=1;$=a;g=r;h.width=a;h.height=r;break;case S:d=r>0?l/r:0;$=a*d;h.width=$;break;case p:d=a>0?c/a:0;g=r*d;h.height=g;break;case I:default:c>0?d=a>0?c/a:0:l>0&&(d=r>0?l/r:0)}this.$scale=d;this.$setStyles(h);this.$sourceImage&&this.$transformImageByOffset(t!==null&&t!==void 0?t:this.$sourceImage.$getTransform(),-o,-n)}$transformImageByOffset(e,t,s){const{$image:i,$scale:o,$sourceImage:n}=this;if(n&&i&&o>=0){const[n,a,r,h,c,l]=e;const $=(t*h-r*s)/(n*h-r*a);const g=(s*n-a*t)/(n*h-r*a);const d=n*$+r*g+c;const m=a*$+h*g+l;i.$ready((e=>{this.$setStyles.call(i,{width:e.naturalWidth*o,height:e.naturalHeight*o})}));i.$setTransform(n,a,r,h,d*o,m*o)}}}CropperViewer.$name=l;CropperViewer.$version="2.0.0";export{f as RESIZE_BOTH,S as RESIZE_HORIZONTAL,I as RESIZE_NONE,p as RESIZE_VERTICAL,CropperViewer as default};

